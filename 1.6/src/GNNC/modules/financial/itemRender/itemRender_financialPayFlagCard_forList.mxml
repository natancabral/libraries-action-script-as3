<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" width="100%" height="100%" minHeight="22"
				
				click			= "{__click()}"
				mouseDown		= "{__mouseDown()}"
				mouseUp			= "{__mouseUp()}"
				rightMouseDown	= "{__rightClick()}" xmlns:stage="GNNC.elements.stage.*"
				
				>
	<fx:Script>
		<![CDATA[
			import GNNC.data.data.gnncData;
			import GNNC.data.data.gnncDataArrayCollection;
			import GNNC.data.globals.gnncGlobalArrays;
			import GNNC.gnncEmbedBank;
			import GNNC.gnncEmbedBlackWhite;
			
			private function __click():void
			{
				Object(owner).dispatchEvent(new Event('MOUSE_CLICK'));
			}
			
			private function __mouseDown():void
			{
				Object(owner).dispatchEvent(new Event('MOUSE_DOWN'));
			}
			
			private function __mouseUp():void
			{
				Object(owner).dispatchEvent(new Event('MOUSE_UP'));
			}
			
			private function __rightClick():void
			{
				var id:ContextMenuItem 		= new ContextMenuItem("Bandeira: "+data.data, false, false);
				//view.addEventListener			(Event.SELECT,__f);
				
				var cm:ContextMenu 				= new ContextMenu();
				cm.hideBuiltInItems				();
				cm.customItems 					= [id];
				
				this.contextMenu 				= cm;
			}
			
			private function __getBank(obj:Object):Object
			{
				//if(obj.ACCOUNT_TYPE == 'CCOFRE' || obj.ACCOUNT_TYPE == 'DINHEI')
				//	return gnncEmbedBlackWhite.bw_financial_16;
				
				var x:int = new gnncDataArrayCollection().__getIndex(gnncGlobalArrays._financialBankFlagSimple,'image',obj.image);
				return x < 0 ? gnncEmbedBlackWhite.bw_financial_16_type_creditcard : gnncEmbedBank[gnncGlobalArrays._financialBankFlagSimple.getItemAt(x).image+'_16'];
			}
			
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="normalAndShowsCaret"/>
		<s:State name="hoveredAndShowsCaret"/>
		<s:State name="selectedAndShowsCaret"/>
	</s:states>
	
	<s:Rect left="0" top="0" right="0" bottom="0" radiusX="2">
		<s:fill>
			<s:SolidColor color="0xFFFFFF" color.hovered="0xEEEEEE" color.hoveredAndShowsCaret="0xEEEEEE"/>
		</s:fill>
	</s:Rect>
	
	<s:Rect left="0" top="0" right="0" bottom="0" includeIn="hoveredAndShowsCaret,hovered" radiusX="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFAFAFA" />
				<s:GradientEntry color="0xEDEDED" />
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xBBBBBB" />
		</s:stroke>
	</s:Rect>
	
	<s:Rect left="0" top="0" right="0" bottom="0" includeIn="selected,selectedAndShowsCaret" radiusX="3">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x3785e2"/>
				<s:GradientEntry color="0x2170cf"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<s:HGroup left="5" top="0" right="5" bottom="0" color.selected="0xFFFFFF" color.selectedAndShowsCaret="0xFFFFFF" gap="3" verticalAlign="middle">
		<s:Image source="{__getBank(data)}" toolTip="{'Bandeira: '+data.data}" height="16" width="16"/>
		<s:Label text="{data.label}" width="100%" maxDisplayedLines="1" showTruncationTip="true" fontWeight="bold" paddingLeft="5"/>
	</s:HGroup>
	
</s:ItemRenderer>