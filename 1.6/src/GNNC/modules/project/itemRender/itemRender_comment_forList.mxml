<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" 
				width="100%" maxHeight="90"
				
				rightMouseDown="{__rDown()}" 
				mouseDown="{__rDown()}"
				doubleClick="{__mDC()}"
				xmlns:stage="GNNC.elements.stage.*"
				doubleClickEnabled="true" xmlns:gnncImage="GNNC.UI.gnncImage.*" xmlns:elements="GNNC.UI.elements.*"
				>
	<fx:Declarations>
		
		<!--mx:Fade id="fadeEffect_" duration="6000" target="{this}" />
		
		<s:Transition fromState="hovered" toState="selected">
			<mx:Fade target="{this}" duration="6000" />
		</s:Transition-->

	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import GNNC.data.data.gnncData;
			import GNNC.data.date.gnncDate;
			import GNNC.data.globals.gnncGlobalStatic;
			import GNNC.event.gnncEventGeneral;
			import GNNC.gnncEmbedBlackWhite;
			
			import mx.graphics.SolidColorStroke;
			
			private function __selectIndex():void
			{
				Object(owner).selectedIndex = itemIndex;
			}
			
			private function __rDown():void
			{
				__selectIndex();
				Object(owner).dispatchEvent(new gnncEventGeneral(gnncEventGeneral._rightMouseDown,data));
				if(Object(owner).hasOwnProperty('_contextMenu'))
					this.contextMenu = Object(owner)._contextMenu;
			}
			
			private function __mDown():void
			{
				__selectIndex();
				Object(owner).dispatchEvent(new gnncEventGeneral(gnncEventGeneral._mouseDown,data));
				if(Object(owner).hasOwnProperty('_contextMenu'))
					this.contextMenu = Object(owner)._contextMenu;
			}
			
			private function __mDC():void
			{
				__selectIndex();
				Object(owner).dispatchEvent(new gnncEventGeneral(gnncEventGeneral._mouseDoubleClick,data));
				Object(owner).dispatchEvent(new gnncEventGeneral(gnncEventGeneral._view,data));
				if(Object(owner).hasOwnProperty('_contextMenu'))
					this.contextMenu = Object(owner)._contextMenu;
			}
			
			protected function __location(data_:Object):Object
			{
				if(String(data_.ATTACH_CLIENT).length>5)
					return gnncGlobalStatic._httpHost+'ATTACH/'+String(gnncGlobalStatic._dataBase).toUpperCase()+'/'+data_.ATTACH_CLIENT;
				else
					return null;
			}

			protected function __update():void
			{
				photo_.source = __location(data);
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="normalAndShowsCaret"/>
		<s:State name="hoveredAndShowsCaret"/>
		<s:State name="selectedAndShowsCaret"/>
	</s:states>

	<elements:elementHLine left="1" right="1" bottom="0" alpha="1" _COLOR="0xeeeeee"/>

	<s:Rect left="0" top="0" right="0" bottom="0" includeIn="hoveredAndShowsCaret,hovered" radiusX="4" radiusY="4" alpha="1">
		<s:fill>
			<s:SolidColor color="0xeeeeee"/>
		</s:fill>
	</s:Rect>

	<s:Rect left="0" top="0" right="0" bottom="0" includeIn="selected,selectedAndShowsCaret" radiusX="4" radiusY="4">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x3785e2"/>
				<s:GradientEntry color="0x2170cf"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<s:HGroup  left="8" top="8" right="8" bottom="8" gap="8">

		<s:Group width="40" height="40" 
				 left="10" top="10" alpha=".2" alpha.selected="1" alpha.selectedAndShowsCaret="1" >
			<s:Rect width="100%" height="100%" fill="{new SolidColor(0xFFFFFF)}" />
			<s:Rect width="100%" height="100%" stroke="{new SolidColorStroke(0x2170cf,.4)}" alpha=".2" />
			<s:Image source="{gnncEmbedBlackWhite.bw_comment_16}" horizontalCenter="0" verticalCenter="0"/>
			<s:Image id="photo_" source="{__location(data)}" left="1" top="1" right="1" bottom="1" smooth="true" smoothingQuality="high" scaleMode="zoom" updateComplete="{__update()}"
					 toolTip="{data.ATTACH_CLIENT}"
					 visible="{__location(data)==null?false:true}"
					 />
		</s:Group>

		<s:VGroup width="100%" height="100%" gap="1" color.selected="0xFFFFFF" color.selectedAndShowsCaret="0xFFFFFF" >
			<s:HGroup width="100%" gap="5" paddingTop="1" paddingBottom="1">
				
				<s:Label text="{data.NAME_USER?gnncData.__firstLetterUpperCase(data.NAME_USER):'Usuário não encontrado'}" 
						 showTruncationTip="true" maxDisplayedLines="1" fontSize="12" width="100%" fontWeight="bold"
						 paddingBottom="5"
						 />
				
				<s:Label text="{gnncDate.__date2Legend(data.DATE,null,true,true,'-',true,true,' ')}" 
						 maxDisplayedLines="1" showTruncationTip="true" fontSize="10" paddingTop="1" width="60" alpha=".8" fontWeight="normal" textAlign="right" 
						 includeIn="selected,selectedAndShowsCaret"
						 />
				<s:Label text="{gnncDate.__relativeDateFromNow(data.DATE,false)}" 
						 maxDisplayedLines="1" showTruncationTip="true" fontSize="10" paddingTop="1" width="60" alpha=".8" fontWeight="normal" textAlign="right" 
						 excludeFrom="selected,selectedAndShowsCaret"
						 color="0x999999" color.selected="0xFFFFFF" color.selectedAndShowsCaret="0xFFFFFF" 
						 />
				
			</s:HGroup>
			<!-- s:TextArea text="{data.MESSAGE}" borderVisible="false" width="100%" height="100%" contentBackgroundAlpha="0" editable="false"
						selectable="false" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
						verticalScrollPolicy="off" horizontalScrollPolicy="off"
						/ -->
			<s:Label text="{data.MESSAGE}" width="100%" height="100%"
					 paddingBottom="2" paddingLeft="0" paddingRight="0" paddingTop="0"
					 maxDisplayedLines="4" showTruncationTip="false"
					 color="0x555555" color.selected="0xFFFFFF" color.selectedAndShowsCaret="0xFFFFFF" 
					 />
		</s:VGroup>

	</s:HGroup>
		
</s:ItemRenderer>