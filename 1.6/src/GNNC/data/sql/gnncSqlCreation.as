package GNNC.data.sql{	import mx.utils.ObjectUtil;	import mx.utils.StringUtil;		import GNNC.UI.gnncAlert.gnncAlert;	import GNNC.data.data.gnncData;	import GNNC.data.globals.gnncGlobalStatic;	import GNNC.sqlTables.table_sql;

	internal class gnncSqlCreation	{		private var _PARENT:Object;		private var i:uint = 0;				public function gnncSqlCreation(parentApplication_:Object=null)		{			_PARENT = parentApplication_;		}				/** #########################################################  **/		/** ######################## ACTIONS ########################  **/		/** #########################################################  **/				public  function __TABLE(TABLE_:Object=null,WITH_FROM_:Boolean=false):String		{			var className:String = TABLE_.hasOwnProperty('_TABLE') ? TABLE_['_TABLE'] : TABLE_.hasOwnProperty('_className') ? TABLE_['_className'] : new table_sql()._TABLE;			var TXT:String = "";			TXT += (WITH_FROM_==true)?" FROM ":" ";			TXT += " dbd_" + StringUtil.trim(className.toLowerCase());			return TXT;		}						public  function __COLUMNS_RETURN(TABLE_:Object=null,COLUMNS_RETURN_:Array=null,RETURN_A_COUNT_:Boolean=false):String		{			var TABLE:String = __TABLE(TABLE_)			var TXT:String = '';						if(RETURN_A_COUNT_)			{				TXT = "COUNT(*) AS COUNT ";			}			else			{				if(COLUMNS_RETURN_ == null)				{					return TABLE+".* ";				}								i = 0;				while(i<COLUMNS_RETURN_.length)				{					//TXT += TABLE+'.'+COLUMNS_RETURN_[i] + ", ";					TXT += COLUMNS_RETURN_[i] + ", ";					i++;				}								TXT = TXT.substr(0,-2);			}			return TXT;		}						public  function __WHERE(TABLE_:Object=null,ACCEPT_RELATIVE_COLUMNS_:Array=null,CASE_SENSITIVE_:Array=null,WHERE_AND:Array=null,WHERE_OR:Array=null,EXCLUDE_COLUMNS_:Array=null):String		{			if(!TABLE_) return " ";			var TXT:String = __CREATE_VALUES(TABLE_,ACCEPT_RELATIVE_COLUMNS_,CASE_SENSITIVE_,WHERE_AND,WHERE_OR,EXCLUDE_COLUMNS_,'SELECT');			return TXT;		}						public function __WHERE_INSERT(TABLE_:Object=null,ACCEPT_NULL_VALUES_:Boolean=false):String		{			if(!TABLE_) return " ";			var TXT:String = __CREATE_VALUES(TABLE_,null,null,null,null,null,'INSERT',ACCEPT_NULL_VALUES_);			return TXT;		}				public function __WHERE_UPDATE(TABLE_:Object=null,UPDATE_WITH_NULL_VALUES_:Boolean=false,COLUMNS_AND_VALUES_:Array=null):String		{				if(!TABLE_) return " ";			var TXT:String = __CREATE_VALUES(TABLE_,null,null,COLUMNS_AND_VALUES_,null,null,'UPDATE',UPDATE_WITH_NULL_VALUES_);			return TXT;		}				public function __WHERE_DELETE(COLUMN_:String='ID',VALUES_:Array=null):String		{			if(!VALUES_) return " ";			var TXT:String = " WHERE " + COLUMN_ + " IN (" + VALUES_.toString() + ")";			return TXT;		}				private var TXT:String;		private var TXN:String;		private var NAM:String;		private var VAL:String;		private var CLN:String;		private var VLE:String;		private var BIN:String;				private var OBJ:Object;		private var XRG:RegExp;		private var XRV:RegExp;		private function __CREATE_VALUES(TABLE_:Object=null,ACCEPT_RELATIVE_COLUMNS_:Array=null,CASE_SENSITIVE_:Array=null,WHERE_AND:Array=null,WHERE_OR:Array=null,EXCLUDE_COLUMNS_:Array=null,METHOD_:String='SELECT',ACCEPT_NULL_VALUES_:Boolean=false):String		{			TXT = "";			TXN = "";			NAM = "";			VAL = "";			CLN = "";			VLE = "";			BIN = "";			OBJ = ObjectUtil.getClassInfo(TABLE_);			XRG = /%/g;			XRV = /;/g;						if(!ACCEPT_RELATIVE_COLUMNS_)	ACCEPT_RELATIVE_COLUMNS_ 	= [];			if(!CASE_SENSITIVE_)			CASE_SENSITIVE_ 			= [];			if(!EXCLUDE_COLUMNS_)			EXCLUDE_COLUMNS_ 			= [];						if(METHOD_ == 'INSERT' || METHOD_ == 'UPDATE')				EXCLUDE_COLUMNS_.push('ID');						if(OBJ.properties.length > 0)			{				for(i=0; i<OBJ.properties.length; i++)				{					NAM = OBJ.properties[i].localName;					VAL = TABLE_[OBJ.properties[i].localName];										//if(NAM.slice(0,1) != '_' && EXCLUDE_COLUMNS_.indexOf(NAM) == -1  && VAL != false && VAL != null) //&& VAL !== false && VAL !== null)					if(NAM.slice(0,1) != '_' && EXCLUDE_COLUMNS_.indexOf(NAM) == -1)					{						if(VAL != false && VAL != null)						{							/**(ENCRYPT.indexOf(NAM) > -1)?VAL=" ENCRYPT('" + VAL + "') ":""; **/							(METHOD_!='SELECT')?'':(ACCEPT_RELATIVE_COLUMNS_.indexOf(NAM) == -1)?VAL=VAL.replace(XRG, ""):" "; //Problem: Remove in text: 10% -> 10							(CASE_SENSITIVE_.indexOf(NAM) > -1)?BIN=" BINARY ":BIN=" ";						}												switch(METHOD_)						{							case 'SELECT': TXN  = NAM + " LIKE " + BIN + " '"+ VAL + "' AND ";	break;							case 'INSERT': CLN += NAM + ","; VLE += "'" + VAL + "',";           break;							case 'UPDATE': TXN  = NAM + " = '" + VAL + "' ,   ";                break;							default: new gnncAlert().__error('Sem critÃ©rio.');						}												if(!ACCEPT_NULL_VALUES_){							if( VAL != false && VAL != null && VAL != '' && ( Number(VAL) != 0 || Number(VAL) != NaN ) )								TXT += TXN;						}else{							TXT += TXN;						}					}				}				if(TXT) TXT = "(" + TXT.substr(0,-4) + ") AND ";			}						/** INSERT **/			if(METHOD_ == 'INSERT')				TXT += " (" + CLN.substr(0,-1) + ") VALUES (" + VLE.substr(0,-1) + ")     ";						/** SELECT **/			if(METHOD_ == 'SELECT')			{				if(WHERE_AND!=null)				{					if(WHERE_AND.length>0){						//WHERE_AND = gnncData.__replace(WHERE_AND," !!== "," <> ");						TXT += "(";						for(i=0;i<WHERE_AND.length;i++)							TXT +=  WHERE_AND[i] + "  AND ";						TXT = TXT.substr(0,-5)+ ")  AND ";					}				}				if(WHERE_OR!=null)				{					if(WHERE_OR.length>0){						//WHERE_OR = gnncData.__replace(WHERE_OR," !!== "," <> ");						TXT += "(";						for(i=0;i<WHERE_OR.length;i++)							TXT += WHERE_OR[i] + "  OR ";						TXT = TXT.substr(0,-5) + ")  OR ";					}				}				if(TXT)					TXT = " WHERE " + TXT;			}			/** UPDATE **/			if(METHOD_ == 'UPDATE')			{				TXN = "";				if(WHERE_AND!=null)				{					if(WHERE_AND.length>0){						//WHERE_AND = gnncData.__replace(WHERE_AND," !!== "," <> ");						if(TXT) TXN += ",";						for(i=0;i<WHERE_AND.length;i++)							TXN += WHERE_AND[i] + ",";						TXN = TXN.substr(0,-1);					}				}								TXT = TXT.substr(1,-7) + TXN + "     ";			}			//TXT = TXT.replace(XRV, "");  //remove ";"			TXT = TXT.substr(0,-5);						return TXT;					}				public function __ORDER_BY(ORDER_BY_:Array=null,DESC_:Boolean=true):String		{			if(!ORDER_BY_) return " ";			var TXT:String = "";			for(i=0;i<ORDER_BY_.length;i++)				TXT += ORDER_BY_[i] + ", ";			TXT = " ORDER BY " + TXT.substr(0,-2);			TXT += (DESC_==true)?" DESC ":" ASC ";			return TXT;		}				public function __LIMIT(LIMIT_:Array=null,PAGE_:Array=null):String		{			/** One Number    = LIMIT 0,number1			 * 	Two Numbers   = LIMIT number1,number2			 * 	Three Numbers = LIMIT number2*number3,number2 **/						return (LIMIT_==null)?' ':(LIMIT_.length==1)?' LIMIT 0,'+LIMIT_[0]+' ':(LIMIT_.length==2)?' LIMIT '+LIMIT_[0]+','+LIMIT_[1]+' ':' LIMIT '+LIMIT_[1]*LIMIT_[2]+','+uint(LIMIT_[1]);		}				public function __IF(IF_:Array=null):void		{			/**			 * SELECT NAME, ID,			 CASE			 WHEN ID <= 20 THEN 'Menor que Vinte.'			 WHEN ID <= 40 THEN 'Menor que 40 e Maior que 20.'			 WHEN ID <= 60 THEN 'Menor que 60 e Maior que 40.'			 ELSE 'Maior que 60'			 END AS NOVO_VALOR			 FROM TABLE_			 ORDER BY ID;			 * 			 * **/		}				public function __ROWS_TABLES(TABLES_:Array=null):String		{			if(!TABLES_) return "";			var TXT:String 	= "";			for(i=0;i<TABLES_.length;i++)				TXT += "(SELECT COUNT(*) " + __TABLE(TABLES_[i],true) + " ) AS COUNT_" + TABLES_[i]._TABLE.toString().toUpperCase() + " , ";			TXT = TXT.substr(0,-2);			return TXT;			//SELECT 			//(SELECT count(*) from dbd_client) 	as ROW_CLIENT,			//(SELECT SUBSTR(dbd_financial.DATE,7,2) FROM dbd_financial WHERE dbd_financial.DATE > 0 LIMIT 0,1) as DAY,		}				public function __RETURN_LAST_ID(TABLE_:Object=null):String		{			if(!TABLE_) return " ";			var TXT:String = gnncGlobalStatic._breakSql + " SELECT * " + __TABLE(TABLE_,true) + __WHERE(TABLE_,null,null,null,null,['ID','DATE','DATE_FINAL','DATE_MODIFIED']) + __ORDER_BY(['ID']) + __LIMIT([0,1]);			return TXT;		}				/**		 * 		 * SELECT * FROM t1 LEFT JOIN (t2, t3, t4)          ON (t2.a=t1.a AND t3.b=t1.b AND t4.c=t1.c)				  				   or				 * mysql> SELECT cds.artist, cds.title, genres.genreID, genres.genre 			-> FROM cds			-> INNER JOIN genres 			-> ON cds.genreID = genres.genreID;		+--------------------+------------------------------+---------+----------------+		| artist             | title                        | genreID | genre          |		+--------------------+------------------------------+---------+----------------+		| Various            | Now 49                       |       1 | Pop            |		| westlife           | westlife                     |       1 | Pop            |		| Various            | Eurovision Song contest 2001 |       2 | Easy Listening |		+--------------------+------------------------------+---------+----------------+		 * **/		public function __JOIN_INNER(TABLE_:Object=null):String		{			/** ESTART NO SELECT para selecionar qual coluna trazer **/			if(!TABLE_) return " ";			var TXT:String = " ";			return TXT;		}							}}