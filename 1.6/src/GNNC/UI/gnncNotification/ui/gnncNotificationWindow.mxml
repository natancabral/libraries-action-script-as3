<?xml version="1.0" encoding="utf-8"?>
<s:Window
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	systemChrome="none" 
	transparent="true"
	showStatusBar="false" 
	type="lightweight"
	alwaysInFront="true" 
	resizable="false"
	maximizable="false" 
	minimizable="false"
	width="{notificationContent.width}" 
	height="{notificationContent.height}"
	click="clickHandler()" 
	creationComplete="init()"
	backgroundAlpha="0"
	contentBackgroundAlpha="0" 
	xmlns:stage="GNNC.elements.stage.*"
>	
	<fx:Script>
		<![CDATA[
			import GNNC.UI.gnncNotification.event.gnncNotificationEvent;
			import GNNC.UI.gnncNotification.gnncNotificationConst;
			import GNNC.UI.gnncNotification.gnncNotificationManager;
			import GNNC.application.gnncApplication;
			import GNNC.data.globals.gnncGlobalStatic;
			
			import flash.desktop.NativeApplication;
			
			import mx.events.EffectEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.UIDUtil;
			
			public static const NOTIFICATION_IDENTIFIER:String = "M6D-MAGNUM-SIDEARM-WINDOW";
			
			[Bindable] public var notificationTitle:String;
			[Bindable] public var notificationMessage:String;
			[Bindable] public var notificationImage:Object;
			[Bindable] public var notificationLink:String;
			[Bindable] public var isCompact:Boolean;
			[Bindable] public var isSticky:Boolean;
			[Bindable] public var isReplayable:Boolean = true;
			
			private const _imageProgram:Object = gnncGlobalStatic._programIcon48;
			
			public var notificationManager:gnncNotificationManager;
			
			private static const NOTIFICATION_WIDTH:int = 400;
			private static const NOTIFICATION_TEXT_WIDTH:int = 340;
			private static const RIGHT_MARGIN:int = 10;
			private static const TOP_MARGIN:int = 5;
			private static const MAX_FADEIN_ALPHA:Number = 1;//0.85;
			private static const MOVE_BY:int = 5;
			private static const LIFETIME_RESET_VALUE:int = 5;	// in seconds
			
			private var lifetimeTimer:Timer;
			private var repositionTimer:Timer;
			private var lifetime:int;
			private var ticks:int;
			private var isTop:Boolean;
			private var isLeft:Boolean;
			private var notificationId:String;
			
			private function init():void
			{
				
				// listen for important events
				notificationManager.addEventListener(gnncNotificationEvent.CLOSE_ALL_NOTIFICATIONS, closeToast);
				notificationManager.addEventListener(gnncNotificationEvent.USER_IS_PRESENT, userPresentHandler);
				addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
				addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
				
				// mark this update uniquely
				notificationId = UIDUtil.createUID();
				title += ":" + notificationId;
				
				// set notification display length
				lifetime = notificationManager.displayLength;
				
				// start the lifetime logic
				ticks = lifetime;
				lifetimeTimer = new Timer(1000);
				lifetimeTimer.addEventListener(TimerEvent.TIMER, lifetimeTimerHandler);
				if (!isSticky)
				{
					lifetimeTimer.start();
				}  // if statement
				
				// start the reposition logic
				repositionTimer = new Timer(gnncNotificationConst.REPOSITION_LENGTH * 1000);
				repositionTimer.addEventListener(TimerEvent.TIMER, repositionTimerHandler);
				repositionTimer.start();
				
				// determine location of notification
				isTop = notificationManager.displayLocation == gnncNotificationConst.DISPLAY_LOCATION_TOP_LEFT || notificationManager.displayLocation == gnncNotificationConst.DISPLAY_LOCATION_TOP_RIGHT;
				isLeft = notificationManager.displayLocation == gnncNotificationConst.DISPLAY_LOCATION_TOP_LEFT || notificationManager.displayLocation == gnncNotificationConst.DISPLAY_LOCATION_BOTTOM_LEFT;
				
				// find a position on-screen
				var position:Point = findSpotForMessage(this.bounds);
				nativeWindow.x = Capabilities.screenResolutionX - width - RIGHT_MARGIN;
				nativeWindow.y = position.y;
				landingEffect.yTo = position.y;
				landingEffect.yFrom = (isTop) ? position.y - MOVE_BY : position.y + MOVE_BY;
				landingEffect.xFrom = landingEffect.xTo = position.x;
				
				// show it!
				visible = true;
				fadein.play();
				
				function lifetimeTimerHandler(event:TimerEvent):void
				{
					if (!notificationManager.isUserIdle && --ticks == 0)
					{
						lifetimeTimer.stop();
						closeToast();
					}  // if statement
				}  // timerHandler
				
				function repositionTimerHandler(event:TimerEvent):void
				{
					// find a position on-screen
					var newPosition:Point = findSpotForMessage(bounds);
					repositionEffect.xFrom = position.x;
					repositionEffect.xTo = newPosition.x;
					repositionEffect.yFrom = position.y;
					repositionEffect.yTo = newPosition.y;
					repositionEffect.play();
					
					// reset original position so that new repositioning actions are still handled correctly
					position = newPosition;
				}  // repositionTimerHandler
			}  // init
			
			private function findSpotForMessage(size:Rectangle):Point
			{
				var spot:Point = new Point();
				var done:Boolean = false;
				var currentScreen:Screen;
				var screen:Screen = currentScreen = Screen.mainScreen;
				
				var x:int;
				var y:int;
				var rectangle:Rectangle;
				
				for (x = (isLeft ? screen.visibleBounds.x + RIGHT_MARGIN : screen.visibleBounds.x + screen.visibleBounds.width - size.width - TOP_MARGIN);
					 (isLeft ? x <= screen.visibleBounds.x + screen.visibleBounds.width - size.width - 5 : x >= screen.visibleBounds.x);
					 x -= (isLeft ? -(size.width + TOP_MARGIN) : size.width + TOP_MARGIN))
				{
					for (y = (isTop ? screen.visibleBounds.y + TOP_MARGIN + TOP_MARGIN : screen.visibleBounds.y + screen.visibleBounds.height - size.height - TOP_MARGIN);
						 (isTop ? y <= screen.visibleBounds.y + screen.visibleBounds.height - size.height - TOP_MARGIN : y >= screen.visibleBounds.y);
						 y += (isTop ? 10 : -10))
					{
						rectangle = new Rectangle(x, isTop ? y - TOP_MARGIN : y, size.width + TOP_MARGIN, size.height + TOP_MARGIN);
							
						if(!isOccupied(rectangle))
						{
							spot.x = x;
							spot.y = y;
							done = true;
							break;
						}  // if statement
					}  // for loop
					
					if (done)
					{
						break;
					}  // if statement
				}  // for loop
				
				return spot;
			}  // findSpotForMessage
			
			private function isOccupied(rectangle:Rectangle):Boolean
			{
				var occupied:Boolean = false;
				var isOtherWindow:Boolean = false;
				for each (var window:NativeWindow in NativeApplication.nativeApplication.openedWindows)
				{
					for (var i:int = 0; i < gnncNotificationManager.otherWindowsToAvoid.length; i++)
					{
						if (window.title.indexOf(gnncNotificationManager.otherWindowsToAvoid[i]) >= 0)
						{
							isOtherWindow = true;
							break;
						}  // if statement
					}  // for loop
					occupied = occupied ||  (((window.title.indexOf(NOTIFICATION_IDENTIFIER) >= 0 && window.title.indexOf(notificationId) < 0) || isOtherWindow) && window.bounds.intersects(rectangle) && window.visible);
				}  // for loop
				
				return occupied;
			}  // isOccupied
			
			private function clickHandler():void
			{
				if (notificationLink != null && notificationLink.length > 0)
				{
					flash.net.navigateToURL(new URLRequest(notificationLink));
				}  // if statement
			}  // clickHandler
			
			private function closeToast(event:Event = null):void
			{
				// clean up the event listeners
				notificationManager.removeEventListener(gnncNotificationEvent.CLOSE_ALL_NOTIFICATIONS, closeToast);
				notificationManager.removeEventListener(gnncNotificationEvent.USER_IS_PRESENT, userPresentHandler);
				removeEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
				removeEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
				
				// If 'close' button was pushed, let's close it
				// immediately.  Otherwise, let's start the
				// fade-out effect and close after it's done playing.
				if (event is MouseEvent)
				{
					event.preventDefault();
					finishClose();
				}  // if statement
				else
				{
					fadeout.addEventListener(EffectEvent.EFFECT_END, finishClose);
					fadeout.play();
				}  // else statement
				
				function finishClose(event:Event = null):void
				{
					if (event is EffectEvent)
					{
						fadeout.removeEventListener(EffectEvent.EFFECT_END, finishClose);
					}  // if statement
					
					notificationManager.dispatchEvent(new gnncNotificationEvent(gnncNotificationEvent.NOTIFICATION_CLOSE));
					lifetimeTimer.stop();
					repositionTimer.stop();
					close();
				}  // finishClose
			}  // closeToast
			
			private function mouseOverHandler(event:MouseEvent = null):void
			{
				// reset lifetime
				if (ticks < LIFETIME_RESET_VALUE)
				{
					ticks = LIFETIME_RESET_VALUE;
				}  // if statement
				
				lifetimeTimer.stop();
			}  // mouseOverHandler
			
			private function mouseOutHandler(event:MouseEvent = null):void
			{
				if (!isSticky)
				{
					lifetimeTimer.start();
				}  // if statement
			}  // mouseOutHandler
			
			private function userPresentHandler(event:gnncNotificationEvent):void
			{
				// reset lifetime if too low - don't want notifications disappearing immediately after the user returns
				if (ticks < LIFETIME_RESET_VALUE)
				{
					ticks = LIFETIME_RESET_VALUE;
				}  // if statement
			}  // userPresentHandler
			
			private function whoSizeImage(o:*):uint
			{
				var n:String = '';
				if(o is String){
					n = String(o);
				}else{
					n = ObjectUtil.getClassInfo(o).name;
				}
				if(n.indexOf('16')>-1)
					return 16;
				if(n.indexOf('32')>-1)
					return 32;
				if(n.indexOf('48')>-1)
					return 48;
				
				return isCompact ? 16 : 48;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Fade id="fadein" 			target="{this}" alphaFrom="0" alphaTo="{MAX_FADEIN_ALPHA}" duration="500" effectStart="landingEffect.play()" />
		<mx:Fade id="fadeout" 			target="{this}" alphaFrom="{MAX_FADEIN_ALPHA}" alphaTo="0" duration="800" effectEnd="close()" />
		<mx:Move id="landingEffect" 	target="{this}" duration="250" />
		<mx:Move id="repositionEffect" 	target="{this}" duration="500" />
	</fx:Declarations>

	<!--fx:Style source="/GNNC/UI/gnncNotification/style/style.css" /-->
	
	<s:Group width="100%" height="100%" mouseDown="{gnncApplication.__windowsDrag(event)}">

		<s:RectangularDropShadow distance="1" brRadius="4" blRadius="4" tlRadius="4" trRadius="4" blurX="5" blurY="5" left="5" top="5" right="5" bottom="5"/>

		<s:Rect left="5" top="5" right="5" bottom="5" radiusX="3" radiusY="3" >
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xf0f0f0" />
					<s:GradientEntry color="0xEEEEEE" />
					<!-- s:GradientEntry color="0x515151"/>
					<s:GradientEntry color="0x333333"/-->
				</s:LinearGradient>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0xCCCCCC"/>
			</s:stroke>
		</s:Rect>
		
		<s:HGroup id="notificationContent" styleName="notification" width="{NOTIFICATION_WIDTH}" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15" >
			<s:Image id="image_" height="{(isCompact) ? 16 : whoSizeImage(notificationImage) }" width="{(isCompact) ? 16 : whoSizeImage(notificationImage) }" source="{notificationImage is String ? String(notificationImage) : notificationImage ? notificationImage : _imageProgram }" />
			<s:VGroup paddingLeft="4" paddingTop="5" gap="5" color="0x333333">
				<s:RichText styleName="notificationText" text="{notificationTitle}" fontWeight="bold" width="{NOTIFICATION_TEXT_WIDTH}" showTruncationTip="true" maxDisplayedLines="1" 
							fontSize="13"/>
				<s:RichText styleName="notificationText" text="{notificationMessage}" width="{NOTIFICATION_TEXT_WIDTH}" visible="{(isCompact) ? false : true}" includeInLayout="{(isCompact) ? false : true}" height="100%" maxDisplayedLines="3" showTruncationTip="true"
							fontSize="11"/>
			</s:VGroup>
		</s:HGroup>
		<s:Button width="10" height="10" top="7" right="7" click="closeToast(event)" />
	</s:Group>
	
</s:Window>