<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" href="PDF%20-%20AlivePDF%20API%20Documentation_arquivos/style.css" type="text/css" media="screen">
<link rel="stylesheet" href="PDF%20-%20AlivePDF%20API%20Documentation_arquivos/print.css" type="text/css" media="print">
<meta content="PDF,org.alivepdf.pdf.PDF,addBookmark,addCell,addEventListener,addImage,addLink,addMultiCell,addPage,addText,addTextNote,addTransition,aliasNbPagesMethodMethod,beginFill,curveTo,dispatchEvent,drawCircle,drawEllipse,drawPolygone,drawRect,drawRoundRect,end,endFill,getCurrentPage,getMargins,getPage,getPageCount,getX,getY,hasEventListener,lineStyle,lineTo,moveTo,newLine,removeAllPages,removeEventListener,removePage,rotatePage,savePDF,setAlpha,setAuthor,setBottomMargin,setCreator,setDisplayMode,setFont,setFontSize,setKeywords,setLeftMargin,setMargins,setPagination,setRightMargin,setSubject,setTitle,setTopMargin,setViewerPreferences,setX,setXY,setY,textStyle,willTrigger,writeText" name="keywords">
<title>PDF - AlivePDF API Documentation</title>
</head>
<body>
<script type="text/javascript" language="javascript" src="PDF%20-%20AlivePDF%20API%20Documentation_arquivos/asdoc.js"></script><script type="text/javascript" language="javascript" src="PDF%20-%20AlivePDF%20API%20Documentation_arquivos/cookies.js"></script><script type="text/javascript" language="javascript">
<!--
				asdocTitle = 'PDF - AlivePDF API Documentation';
				var baseRef = '../../../';
				window.onload = configPage;
			--></script>
<table style="" id="titleTable" class="titleTable" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="titleTableTitle" align="left">AlivePDF API Documentation</td><td class="titleTableTopNav" align="right"><a onclick="loadClassListFrame('../../../all-classes.html')" href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/package-summary.html">All&nbsp;Packages</a>&nbsp;|&nbsp;<a onclick="loadClassListFrame('../../../all-classes.html')" href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/class-summary.html">All&nbsp;Classes</a>&nbsp;|&nbsp;<a onclick="loadClassListFrame('../../../index-list.html')" href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/all-index-A.html">Index</a>&nbsp;|&nbsp;<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/index.html?org/alivepdf/pdf/PDF.html&amp;org/alivepdf/pdf/class-list.html" id="framesLink1">Frames</a><a onclick="parent.location=document.location" href="" style="display:none" id="noFramesLink1">No&nbsp;Frames</a></td><td rowspan="3" class="titleTableLogo" align="right"><img alt="Adobe Logo" title="Adobe Logo" class="logoImage" src="PDF%20-%20AlivePDF%20API%20Documentation_arquivos/logo.jpg"></td>
</tr>
<tr class="titleTableRow2">
<td id="subTitle" class="titleTableSubTitle" align="left">Class&nbsp;PDF</td><td id="subNav" class="titleTableSubNav" align="right"><a href="#methodSummary">Methods</a>&nbsp;| <a href="#eventSummary">Events</a></td>
</tr>
<tr class="titleTableRow3">
<td colspan="2">&nbsp;</td>
</tr>
</tbody></table>
<script type="text/javascript" language="javascript">
<!--
if (!isEclipse() || window.name != ECLIPSE_FRAME_NAME) {titleBar_setSubTitle("ClassÂ PDF"); titleBar_setSubNav(false,false,false,false,true,false,true,false,false,false,false,false,false,false);}
--></script>
<div class="MainContent">
<table class="classHeaderTable" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="classHeaderTableLabel">Package</td><td><a onclick="javascript:loadClassListFrame('class-list.html')" href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/pdf/package-detail.html">org.alivepdf.pdf</a></td>
</tr>
<tr>
<td class="classHeaderTableLabel">Class</td><td class="classSignature">public final  class PDF</td>
</tr>
<tr>
<td class="classHeaderTableLabel">Implements</td><td>flash.events.IEventDispatcher</td>
</tr>
</tbody></table>
<p></p>
 The PDF class represents a PDF document.
 <p></p>
<br>
<hr>
</div>
<a name="methodSummary"></a>
<div class="summarySection">
<div class="summaryTableTitle">Public Methods</div>
<table id="summaryTableMethod" class="summaryTable " cellpadding="3" cellspacing="0">
<tbody><tr>
<th>&nbsp;</th><th colspan="2">Method</th><th class="summaryTableOwnerCol">Defined&nbsp;by</th>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#PDF%28%29">PDF</a>(pOrientation:String = "Portrait", pUnit:String = "Mm", pageSize:Object = null)</div>
<div class="summaryTableDescription">
  The PDF class represents a PDF document.</div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addBookmark%28%29">addBookmark</a>(pText:String, pLevel:int = 0, pY:Number = 0, pRed:Number = 0, pGreen:Number = 0, pBlue:Number = 0):void</div>
<div class="summaryTableDescription">
  Lets you add a bookmark
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addCell%28%29">addCell</a>(pWidth:Number
 = 0, pHeight:Number = 0, pText:String = "", pBorder:Number = 0, 
pLn:String = "0", pAlign:Number, pFill:String = "0", pLink:*):void</div>
<div class="summaryTableDescription">
  Add a cell with some text to the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addEventListener%28%29">addEventListener</a>(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void</div>
<div class="summaryTableDescription"></div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addImage%28%29">addImage</a>(pDisplayObject:DisplayObject,
 pAlpha:Number = 1, pBlend:String = "Normal", pMatrix:Matrix = null, 
pResizePage:Boolean = false, pEncoding:String = "JPG", pQuality:Number =
 100, pX:Number = 0, pY:Number = 0, pWidth:Number = 0, pHeight:Number = 
0, pLink:String = ""):void</div>
<div class="summaryTableDescription">
  The addImage method takes an incoming DisplayObject object, take a snapshot from it in JPG and add it to the PDF document
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addLink%28%29">addLink</a>(pX:Number, pY:Number, pWidth:Number, pHeight:Number, pLink:String, pHighlight:* = I):void</div>
<div class="summaryTableDescription">
  Lets you add clickable link at a specific position
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addMultiCell%28%29">addMultiCell</a>(pWidth:Number, pHeight:Number, pText:String, pBorder:String = "0", pAlign:int = J, pFill:* = 0):void</div>
<div class="summaryTableDescription">
  Add a multicell with some text to the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addPage%28%29">addPage</a>(pOrientation:String = "", pUnit:String = "Mm", pSize:Object = null, pRotation:Number = 0):void</div>
<div class="summaryTableDescription">
  Lets you add a page to the current PDF
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addText%28%29">addText</a>(pTxt:String, pX:Number = 0, pY:Number = 0):void</div>
<div class="summaryTableDescription">
  Lets you set some text to any position on the page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addTextNote%28%29">addTextNote</a>(pX:Number, pY:Number, pWidth:Number, pHeight:Number, pText:String = "A note !"):void</div>
<div class="summaryTableDescription">
  Lets you add a text annotation to the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#addTransition%28%29">addTransition</a>(pStyle:String
 = "R", pDuration:Number = 1, pDimension:String = "H", 
pMotionDirection:String = "I", pTransitionDirection:int = 0):void</div>
<div class="summaryTableDescription">
  Lets you add a transition between each PDF page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#aliasNbPagesMethodMethod%28%29">aliasNbPagesMethodMethod</a>(alias:String = "{nb}"):void</div>
<div class="summaryTableDescription">
  Lets you rotate a specific page (between 1 and last one)
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#beginFill%28%29">beginFill</a>(pColor:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a>):void</div>
<div class="summaryTableDescription">
  Sets the filling color for differents color spaces CMYK/RGB/DEVICEGRAY
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#curveTo%28%29">curveTo</a>(pControlX1:Number, pControlY1:Number, pControlX2:Number, pControlY2:Number, pFinalX3:Number, pFinalY3:Number):void</div>
<div class="summaryTableDescription">
  The curveTo method draws a cubic bezier curve
  </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#dispatchEvent%28%29">dispatchEvent</a>(event:Event):Boolean</div>
<div class="summaryTableDescription"></div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#drawCircle%28%29">drawCircle</a>(pX:Number, pY:Number, pRadius:Number):void</div>
<div class="summaryTableDescription">
  The drawCircle method draws a circle
  </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#drawEllipse%28%29">drawEllipse</a>(pX:Number, pY:Number, pRx:Number, pRy:Number):void</div>
<div class="summaryTableDescription">
  The drawEllipse method draws an ellipse
  </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#drawPolygone%28%29">drawPolygone</a>(pPoints:Array):void</div>
<div class="summaryTableDescription">
  The drawPolygone method draws a polygone
  </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#drawRect%28%29">drawRect</a>(pRect:Rectangle):void</div>
<div class="summaryTableDescription">
  The drawRect method draws a rectangle shape
  </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#drawRoundRect%28%29">drawRoundRect</a>(pRect:Rectangle, pR:*):void</div>
<div class="summaryTableDescription">
  The drawRoundedRect method draws a rounded rectangle shape
  </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#end%28%29">end</a>():void</div>
<div class="summaryTableDescription">
  The end method closes the stroke
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#endFill%28%29">endFill</a>():void</div>
<div class="summaryTableDescription">
  Ends all previous filling
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#getCurrentPage%28%29">getCurrentPage</a>():Page</div>
<div class="summaryTableDescription">
  Lets you retrieve the current Page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#getMargins%28%29">getMargins</a>():Rectangle</div>
<div class="summaryTableDescription">
  Lets you retrieve the margins dimensions
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#getPage%28%29">getPage</a>(pPage:int):Page</div>
<div class="summaryTableDescription">
  Lets you retrieve a Page object
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#getPageCount%28%29">getPageCount</a>():int</div>
<div class="summaryTableDescription">
  Lets you retrieve the number of pages in the PDF document
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#getX%28%29">getX</a>():Number</div>
<div class="summaryTableDescription">
  Lets you retrieve the X position for the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#getY%28%29">getY</a>():Number</div>
<div class="summaryTableDescription">
  Lets you retrieve the Y position for the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#hasEventListener%28%29">hasEventListener</a>(type:String):Boolean</div>
<div class="summaryTableDescription"></div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#lineStyle%28%29">lineStyle</a>(pColor:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a>, pThickness:Number = 1, pAlpha:Number = 1.0, pBlend:String = "Normal", pStyle:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/drawing/DashedLine.html">DashedLine</a> = null, pCaps:String = null, pJoints:String = null, pMiterLimit:Number = 3, pMatrix:Matrix = null):void</div>
<div class="summaryTableDescription">
  Sets the stroke style
  </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#lineTo%28%29">lineTo</a>(pX:Number, pY:Number):void</div>
<div class="summaryTableDescription">
  Lets you draw a stroke from the current point to the new point
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#moveTo%28%29">moveTo</a>(pX:Number, pY:Number):void</div>
<div class="summaryTableDescription">
  Lets you move the current drawing point to the specified destination
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#newLine%28%29">newLine</a>(pHeight:*):void</div>
<div class="summaryTableDescription">
  Lets you insert a line break for text
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#removeAllPages%28%29">removeAllPages</a>():void</div>
<div class="summaryTableDescription">
  Lets you remove all the pages from the PDF
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#removeEventListener%28%29">removeEventListener</a>(type:String, listener:Function, useCapture:Boolean = false):void</div>
<div class="summaryTableDescription"></div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#removePage%28%29">removePage</a>(pPage:int):Page</div>
<div class="summaryTableDescription">
  Lets you remove a Page from the PDF
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#rotatePage%28%29">rotatePage</a>(pPage:int, pRotation:Number):void</div>
<div class="summaryTableDescription">
  Lets you rotate a specific page (between 1 and last one)
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#savePDF%28%29">savePDF</a>(pMethod:String, pURL:String = "", pDownload:String = "inline", pName:String = "generated.pdf"):*</div>
<div class="summaryTableDescription">
  Lets you finalize and save the PDF document and make it available for download
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setAlpha%28%29">setAlpha</a>(pAlpha:Number, pBlendMode:String = "Normal"):void</div>
<div class="summaryTableDescription">
  Lets you move the current drawing point to the specified destination
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setAuthor%28%29">setAuthor</a>(pAuthor:String):void</div>
<div class="summaryTableDescription">
  Sets the specified author for the PDF tags
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setBottomMargin%28%29">setBottomMargin</a>(pMargin:Number):void</div>
<div class="summaryTableDescription">
  Lets you specify the bottom margin
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setCreator%28%29">setCreator</a>(pCreator:String):void</div>
<div class="summaryTableDescription">
  Sets the specified creator for the PDF tags
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setDisplayMode%28%29">setDisplayMode</a>(pZoom:String = "FullWidth", pLayout:String = "SinglePage", pPageMode:String = "UseNone"):void</div>
<div class="summaryTableDescription">
  Lets you set a specific display mode, the DisplayMode takes care of the general layout of the PDF in Acrobat Reader
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setFont%28%29">setFont</a>(pFamily:String, pStyle:String = "", pSize:int = 0):void</div>
<div class="summaryTableDescription">
  Lets you set a specific font
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setFontSize%28%29">setFontSize</a>(size:int):void</div>
<div class="summaryTableDescription">
  Lets you retrieve a Page object
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setKeywords%28%29">setKeywords</a>(pKeywords:String):void</div>
<div class="summaryTableDescription">
  Sets the specified keywords for the PDF tags
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setLeftMargin%28%29">setLeftMargin</a>(pMargin:Number):void</div>
<div class="summaryTableDescription">
  Lets you specify the left margin
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setMargins%28%29">setMargins</a>(pLeft:Number, pTop:Number, pRight:Number = -1, pBottom:Number = 20):void</div>
<div class="summaryTableDescription">
  Lets you specify the left, top, and right margins
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setPagination%28%29">setPagination</a>(pActive:Boolean):void</div>
<div class="summaryTableDescription">
  Lets you activate the auto pagination mode
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setRightMargin%28%29">setRightMargin</a>(pMargin:Number):void</div>
<div class="summaryTableDescription">
  Lets you specify the right margin
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setSubject%28%29">setSubject</a>(pSubject:String):void</div>
<div class="summaryTableDescription">
  Lets you set a subject for the PDF tags
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setTitle%28%29">setTitle</a>(pTitle:String):void</div>
<div class="summaryTableDescription">
  Lets you set a subject for the PDF tags
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setTopMargin%28%29">setTopMargin</a>(pMargin:Number):void</div>
<div class="summaryTableDescription">
  Lets you specify the top margin
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setViewerPreferences%28%29">setViewerPreferences</a>(pToolBar:String
 = "false", pMenuBar:String = "false", pWindowUI:String = "false", 
pFitWindow:String = "false", pCenteredWindow:String = "false", 
pDisplayTitle:String = "false"):void</div>
<div class="summaryTableDescription">
  Lets you control the way the document is to be presented on the screen or in print.</div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setX%28%29">setX</a>(pX:Number):void</div>
<div class="summaryTableDescription">
  Lets you specify the X position for the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setXY%28%29">setXY</a>(pX:Number, pY:Number):void</div>
<div class="summaryTableDescription">
  Lets you specify the X and Y position for the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#setY%28%29">setY</a>(pY:Number):void</div>
<div class="summaryTableDescription">
  Lets you specify the Y position for the current page
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#textStyle%28%29">textStyle</a>(pColor:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a>,
 pAlpha:int = 1, pRendering:int = 0, pWordSpace:Number = 0, 
pCharSpace:Number = 0, pScale:Number = 100, pLeading:Number = 0):void</div>
<div class="summaryTableDescription">
  Sets the text style
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#willTrigger%28%29">willTrigger</a>(type:String):Boolean</div>
<div class="summaryTableDescription"></div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
<tr class="" bgcolor="#F2F2F2">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#writeText%28%29">writeText</a>(pHeight:Number, pText:String, pLink:String = ""):void</div>
<div class="summaryTableDescription">
  Lets you write some text
    </div>
</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
</tbody></table>
</div>
<a name="eventSummary"></a>
<div class="summarySection">
<div class="summaryTableTitle">Events</div>
<table id="summaryTableEvent" class="summaryTable " cellpadding="3" cellspacing="0">
<tbody><tr>
<th>&nbsp;</th><th colspan="2">Event</th><th>Summary</th><th class="summaryTableOwnerCol">Defined&nbsp;by</th>
</tr>
<tr class="" bgcolor="#FFFFFF">
<td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol">
<div class="summarySignature">
<a class="signatureLink" href="#event:complete">complete</a>
</div>
</td><td class="summaryTableDescription summaryTableCol">
  Dispatched when PDF is generated.</td><td class="summaryTableOwnerCol">PDF</td>
</tr>
</tbody></table>
</div>
<script type="text/javascript" language="javascript">
<!--
showHideInherited();
--></script>
<div class="MainContent">
<a name="constructorDetail"></a>
<div class="detailSectionHeader">Constructor detail</div>
<a name="PDF()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">PDF</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">constructor</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function PDF(pOrientation:String = "Portrait", pUnit:String = "Mm", pageSize:Object = null)</code><p>
  The PDF class represents a PDF document.
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pOrientation</span>:String</code> (default = "<code>Portrait</code>")<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pUnit</span>:String</code> (default = "<code>Mm</code>")<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pageSize</span>:Object</code> (default = <code>null</code>)<code></code></td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to create a valid PDF document :
  <div class="listing">
  <pre>    var myPDF:PDF = new PDF ( Orientation.PORTRAIT, Unit.MM, Size.A4 );
  </pre>
  </div>
  <p></p>
</div>
<a name="methodDetail"></a>
<div class="detailSectionHeader">Method detail</div>
<a name="addBookmark()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addBookmark</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addBookmark(pText:String, pLevel:int = 0, 
pY:Number = 0, pRed:Number = 0, pGreen:Number = 0, pBlue:Number = 
0):void</code><p>
  Lets you add a bookmark
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pText</span>:String</code> â Text appearing in the outline panel
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLevel</span>:int</code> (default = <code>0</code>)<code></code> â Specify the bookmark's level
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> (default = <code>0</code>)<code></code> â Position in the current page to go
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRed</span>:Number</code> (default = <code>0</code>)<code></code> â Red offset for the text color
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pGreen</span>:Number</code> (default = <code>0</code>)<code></code> â Green offset for the text color
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pBlue</span>:Number</code> (default = <code>0</code>)<code></code> â Blue offset for the text color
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add a bookmark for the current page :
  <div class="listing">
  <pre>    myPDF.addBookmark("A bookmark", 0, 0, 0, .9, 0);
  myPDF.addPage();
  myPDF.addBookmark("Another bookmark", 0, 60, .9, .9, 0);
  </pre>
  </div>
  <p></p>
</div>
<a name="addCell()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addCell</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addCell(pWidth:Number = 0, pHeight:Number = 0, 
pText:String = "", pBorder:Number = 0, pLn:String = "0", pAlign:Number, 
pFill:String = "0", pLink:*):void</code><p>
  Add a cell with some text to the current page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pWidth</span>:Number</code> (default = <code>0</code>)<code></code> â Cell width
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pHeight</span>:Number</code> (default = <code>0</code>)<code></code> â Cell height
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pText</span>:String</code> (default = "<code></code>")<code></code> â Text to add into the cell
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pBorder</span>:Number</code> (default = <code>0</code>)<code></code> â Sets the new position after cell is drawn, default value is 0
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLn</span>:String</code> (default = "<code>0</code>")<code></code> â Lets you center or align the text into the cell
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pAlign</span>:Number</code> â Lets you specify if the cell is colored (1) or transparent (0)
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pFill</span>:String</code> (default = "<code>0</code>")<code></code> â Any http link, like http://www.mylink.com
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLink</span>:*</code></td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to write some text within a cell :
  <div class="listing">
  <pre>    myPDF.setFont(FontFamily.HELVETICA, 'B', 12);
  myPDF.textStyle ( new RGBColor ( 255, 0, 0 ) );
  myPDF.addCell(50,10,'Some text into a cell !',1,1);
  </pre>
  </div>
  This example shows how to write some clikable text within a cell :
  <div class="listing">
  <pre>    myPDF.setFont(FontFamily.HELVETICA, 'B', 12);
  myPDF.textStyle ( new RGBColor ( 200, 50, 50 ) );
  myPDF.addCell(50,10,'A clikable cell !',1,1, null, 0, "http://www.alivepdf.org");
  </pre>
  </div>
  <p></p>
</div>
<a name="addEventListener()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addEventListener</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addEventListener(type:String, listener:Function, 
useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean =
 false):void</code><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">type</span>:String</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">listener</span>:Function</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">useCapture</span>:Boolean</code> (default = <code>false</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">priority</span>:int</code> (default = <code>0</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">useWeakReference</span>:Boolean</code> (default = <code>false</code>)<code></code></td>
</tr>
</tbody></table>
</div>
<a name="addImage()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addImage</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addImage(pDisplayObject:DisplayObject, 
pAlpha:Number = 1, pBlend:String = "Normal", pMatrix:Matrix = null, 
pResizePage:Boolean = false, pEncoding:String = "JPG", pQuality:Number =
 100, pX:Number = 0, pY:Number = 0, pWidth:Number = 0, pHeight:Number = 
0, pLink:String = ""):void</code><p>
  The addImage method takes an incoming DisplayObject object, take a snapshot from it in JPG and add it to the PDF document
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pDisplayObject</span>:DisplayObject</code> â Any DisplayObject
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pAlpha</span>:Number</code> (default = <code>1</code>)<code></code> â Image transparency
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pBlend</span>:String</code> (default = "<code>Normal</code>")<code></code> â Blend mode, can be Blend.DIFFERENCE, BLEND.HARDLIGHT, etc.
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pMatrix</span>:Matrix</code> (default = <code>null</code>)<code></code> â A transformation matrix to apply to the picture
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pResizePage</span>:Boolean</code> (default = <code>false</code>)<code></code> â Automatically resize the page so that the full picture fits in the page
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pEncoding</span>:String</code> (default = "<code>JPG</code>")<code></code> â Image format, can be ImageFormat.JPG
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pQuality</span>:Number</code> (default = <code>100</code>)<code></code> â Compression quality
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> (default = <code>0</code>)<code></code> â Image X position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> (default = <code>0</code>)<code></code> â Image Y position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pWidth</span>:Number</code> (default = <code>0</code>)<code></code> â Image width
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pHeight</span>:Number</code> (default = <code>0</code>)<code></code> â Image height
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLink</span>:String</code> (default = "<code></code>")<code></code> â If pLink is specified, the image is clickable and reaches the http link specified when clicked
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add a 100% compression quality JPG image into the current page, and make the image fits :
  <div class="listing">
  <pre>    myPDF.addImage (myDisplayObject, 1 , null, null, false, ImageFormat.JPG, 100, 160, 120, 0, 0);
  </pre>
  </div>
  <p></p>
</div>
<a name="addLink()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addLink</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addLink(pX:Number, pY:Number, pWidth:Number, pHeight:Number, pLink:String, pHighlight:* = I):void</code><p>
  Lets you add clickable link at a specific position
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â Page Format, can be Size.A3, Size.A4, Size.A5, Size.LETTER or Size.LEGAL
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pWidth</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pHeight</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLink</span>:String</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pHighlight</span>:*</code> (default = <code>I</code>)<code></code></td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add an invisible clickable link in the current page :
  <div class="listing">
  <pre>    myPDF.addLink ( 70, 4, 60, 16, "http://www.alivepdf.org");
  </pre>
  </div>
  <p></p>
</div>
<a name="addMultiCell()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addMultiCell</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addMultiCell(pWidth:Number, pHeight:Number, 
pText:String, pBorder:String = "0", pAlign:int = J, pFill:* = 0):void</code><p>
  Add a multicell with some text to the current page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pWidth</span>:Number</code> â Cell width
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pHeight</span>:Number</code> â Cell height
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pText</span>:String</code> â Text to add into the cell
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pBorder</span>:String</code> (default = "<code>0</code>")<code></code> â Lets you specify if a border should be drawn around the cell
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pAlign</span>:int</code> (default = <code>J</code>)<code></code>
 â Lets you center or align the text into the cell, values can be L 
(left align), C (centered), R (right align), J (justified) default value
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pFill</span>:*</code> (default = <code>0</code>)<code></code> â Lets you specify if the cell is colored (1) or transparent (0)
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to write a table made of text cells :
  <div class="listing">
  <pre>    myPDF.setFont('helvetica', 'B', 12);
  myPDF.textStyle ( new RGBColor ( 0, 0, 0 ) );
  myPDF.addMultiCell ( 70, 24, "A multicell :)", 1);
  myPDF.addMultiCell ( 70, 24, "A multicell :)", 1);
  </pre>
  </div>
  <p></p>
</div>
<a name="addPage()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addPage</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addPage(pOrientation:String = "", pUnit:String = "Mm", pSize:Object = null, pRotation:Number = 0):void</code><p>
  Lets you add a page to the current PDF
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pOrientation</span>:String</code> (default = "<code></code>")<code></code> â Page orientation can be Orientation.PORTRAIT or Orientation.LANDSCAPE
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pUnit</span>:String</code> (default = "<code>Mm</code>")<code></code> â Page Unit, can be Unit.MM, Unit.CM, Unit.POINT, Unit.INCHES
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pSize</span>:Object</code> (default = <code>null</code>)<code></code> â Format, can be a custom Size object, or any of the following : Size.A3, Size.A4, Size.A5, Size.LETTER, Size.LEGAL
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRotation</span>:Number</code> (default = <code>0</code>)<code></code> â Page rotation (must be a multiple of 90)
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add an A4 page with a landscape orientation
  <div class="listing">
  <pre>    myPDF.addPage( Size.A4, 0, Orientation.LANDSCAPE );
  </pre>
  </div>
  This example shows how to add an custom page size :
  <div class="listing">
  <pre>    myPDF.addPage( Orientation.LANDSCAPE, Unit.MM,  new Size ([500, 500], "myFavoriteSize", [11.7, 16.5],[297, 420] ));
  </pre>
  </div>
  <p></p>
</div>
<a name="addText()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addText</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addText(pTxt:String, pX:Number = 0, pY:Number = 0):void</code><p>
  Lets you set some text to any position on the page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pTxt</span>:String</code> â The text to add
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> (default = <code>0</code>)<code></code> â X position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> (default = <code>0</code>)<code></code> â Y position
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to set some text to a specific place :
  <div class="listing">
  <pre>    myPDF.addText ('Cubic Bezier curve with curveTo', 14, 110);
  </pre>
  </div>
  <p></p>
</div>
<a name="addTextNote()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addTextNote</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addTextNote(pX:Number, pY:Number, pWidth:Number, pHeight:Number, pText:String = "A note !"):void</code><p>
  Lets you add a text annotation to the current page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â Note X position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> â Note Y position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pWidth</span>:Number</code> â Note width
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pHeight</span>:Number</code> â Note height
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pText</span>:String</code> (default = "<code>A note !</code>")<code></code> â Text for the note
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add a note annotation in the current page :
  <div class="listing">
  <pre>    myPDF.addNote (100, 75, 50, 50, "A note !");
  </pre>
  </div>
  <p></p>
</div>
<a name="addTransition()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">addTransition</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function addTransition(pStyle:String = "R", 
pDuration:Number = 1, pDimension:String = "H", pMotionDirection:String =
 "I", pTransitionDirection:int = 0):void</code><p>
  Lets you add a transition between each PDF page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pStyle</span>:String</code> (default = "<code>R</code>")<code></code> â Transition style, can be Transition.SPLIT, Transition.BLINDS, BLINDS.BOX, Transition.WIPE, etc.
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pDuration</span>:Number</code> (default = <code>1</code>)<code></code> â The transition duration
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pDimension</span>:String</code> (default = "<code>H</code>")<code></code> â The dimension in which the the specified transition effect occurs
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pMotionDirection</span>:String</code> (default = "<code>I</code>")<code></code> â The motion's direction for the specified transition effect
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pTransitionDirection</span>:int</code> (default = <code>0</code>)<code></code> â The direction in which the specified transition effect moves
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add a 4 seconds "Wipe" transition between the first and second page :
  <div class="listing">
  <pre>    myPDF.addPage();
  myPDF.addTransition (Transition.WIPE, 4, Dimension.VERTICAL);
  myPDF.addPage();
  </pre>
  </div>
  <p></p>
</div>
<a name="aliasNbPagesMethodMethod()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">aliasNbPagesMethodMethod</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function aliasNbPagesMethodMethod(alias:String = "{nb}"):void</code><p>
  Lets you rotate a specific page (between 1 and last one)
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">alias</span>:String</code> (default = "<code>{nb}</code>")<code></code> â Page number
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to rotate the first page 90 cw
  <div class="listing">
  <pre>    myPDF.rotatePage ( 1, 90 );
  </pre>
  </div>
  <p></p>
</div>
<a name="beginFill()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">beginFill</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function beginFill(pColor:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a>):void</code><p>
  Sets the filling color for differents color spaces CMYK/RGB/DEVICEGRAY
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pColor</span>:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a></code> â Color object, can be CMYKColor, GrayColor, or RGBColor
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to create a red rectangle in the current page :
  <div class="listing">
  <pre>    myPDF.beginFill ( new RGBColor ( 255, 0, 0 ) );
  myPDF.drawRect ( new Rectangle ( 10, 26, 50, 25 ) );
  </pre>
  </div>
  <p></p>
</div>
<a name="curveTo()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">curveTo</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function curveTo(pControlX1:Number, pControlY1:Number, 
pControlX2:Number, pControlY2:Number, pFinalX3:Number, 
pFinalY3:Number):void</code><p>
  The curveTo method draws a cubic bezier curve
  </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pControlX1</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pControlY1</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pControlX2</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pControlY2</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pFinalX3</span>:Number</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pFinalY3</span>:Number</code></td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to draw some curves lines in the current page :
  <br><b>Important : Always call the end() method when you're done</b>
  <div class="listing">
  <pre>    yPDF.lineStyle ( new RGBColor ( 255, 0, 255 ), 1, 1, null, CapsStyle.NONE, JointStyle.MITER);
  myPDF.moveTo ( 10, 200 );
  myPDF.curveTo ( 120, 210, 196, 280, 139, 195 );
  myPDF.curveTo ( 190, 110, 206, 190, 179, 205 );
  myPDF.end();
  </pre>
  </div>
  <p></p>
</div>
<a name="dispatchEvent()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">dispatchEvent</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function dispatchEvent(event:Event):Boolean</code><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">event</span>:Event</code></td>
</tr>
</tbody></table>
<p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Boolean</code></td>
</tr>
</tbody></table>
</div>
<a name="drawCircle()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">drawCircle</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function drawCircle(pX:Number, pY:Number, pRadius:Number):void</code><p>
  The drawCircle method draws a circle
  </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â X Position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> â Y Position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRadius</span>:Number</code> â Circle Radius
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to create a rounded red ellipse in the current page :
  <div class="listing">
  <pre>    myPDF.beginFill ( new RGBColor ( 0, 0, 255 ) );
  myPDF.drawCircle( 30, 180, 20 );
  </pre>
  </div>
  <p></p>
</div>
<a name="drawEllipse()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">drawEllipse</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function drawEllipse(pX:Number, pY:Number, pRx:Number, pRy:Number):void</code><p>
  The drawEllipse method draws an ellipse
  </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â X Position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> â Y Position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRx</span>:Number</code> â X Radius
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRy</span>:Number</code> â Y Radius
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to create a rounded red ellipse in the current page :
  <div class="listing">
  <pre>    myPDF.lineStyle ( new RGBColor ( 255, 255, 255 ), 1, .3, new DashedLine ([0, 1, 2, 6]), CapsStyle.NONE, JointStyle.ROUND);
  myPDF.beginFill ( new RGBColor ( 150, 0, 0 ) );
  myPDF.drawEllipse( 45, 275, 40, 15 );
  </pre>
  </div>
  <p></p>
</div>
<a name="drawPolygone()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">drawPolygone</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function drawPolygone(pPoints:Array):void</code><p>
  The drawPolygone method draws a polygone
  </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pPoints</span>:Array</code> â Array of points
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to create a polygone with a few points :
  <div class="listing">
  <pre>    myPDF.beginFill ( new RGBColor ( 255, 255, 255 ) );
  myPDF.drawPolygone( [10, 30, 100, 5, 80, 18]  );
  </pre>
  </div>
  <p></p>
</div>
<a name="drawRect()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">drawRect</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function drawRect(pRect:Rectangle):void</code><p>
  The drawRect method draws a rectangle shape
  </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pRect</span>:Rectangle</code> â A flash.geom.Rectange object
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to create a blue rectangle in the current page :
  <div class="listing">
  <pre>    myPDF.lineStyle ( new RGBColor ( 255, 255, 255 ), 1, .3, null, CapsStyle.ROUND, JointStyle.MITER);
  myPDF.beginFill ( new RGBColor ( 0, 0, 190 ) );
  myPDF.drawRect ( new Rectangle ( 20, 46, 100, 45 ) );
  </pre>
  </div>
  <p></p>
</div>
<a name="drawRoundRect()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">drawRoundRect</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function drawRoundRect(pRect:Rectangle, pR:*):void</code><p>
  The drawRoundedRect method draws a rounded rectangle shape
  </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pRect</span>:Rectangle</code> â A flash.geom.Rectange object
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pR</span>:*</code> â Angle radius
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to create a rounded green rectangle in the current page :
  <div class="listing">
  <pre>    myPDF.lineStyle ( new RGBColor ( 255, 0, 0 ), 1, .3, null, CapsStyle.ROUND, JointStyle.MITER);
  myPDF.beginFill ( new RGBColor ( 0, 190, 0 ) );
  myPDF.drawRoundedRect ( new Rectangle ( 20, 46, 100, 45 ), 20 );
  </pre>
  </div>
  <p></p>
</div>
<a name="end()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">end</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function end():void</code><p>
  The end method closes the stroke
    </p><br>
<span class="label">Example</span>
<br>  This example shows how to draw some dashed lines in the current page with specific caps style and joint style :
  <br><b>Important : Always call the end() method when you're done</b>
  <div class="listing">
  <pre>    myPDF.lineStyle( new RGBColor ( 255, 200, 0), 1, 1 );
  myPDF.moveTo ( 10, 20 );
  myPDF.lineTo ( 40, 20 );
  myPDF.lineTo ( 40, 40 );
  myPDF.lineTo ( 10, 40 );
  myPDF.lineTo ( 10, 20 );
  // end the stroke
  myPDF.end();
  </pre>
  </div>
  <p></p>
</div>
<a name="endFill()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">endFill</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function endFill():void</code><p>
  Ends all previous filling
    </p><br>
<span class="label">Example</span>
<br>  This example shows how to create a red rectangle in the current page :
  <div class="listing">
  <pre>    myPDF.beginFill ( new RGBColor ( 0, 255, 255 ) );
  myPDF.moveTo ( 10, 10 );
  myPDF.lineTo ( 20, 90 );
  myPDF.lineTo ( 90, 50);
  myPDF.end()
  myPDF.endFill();
  </pre>
  </div>
  <p></p>
</div>
<a name="getCurrentPage()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">getCurrentPage</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function getCurrentPage():Page</code><p>
  Lets you retrieve the current Page
    </p><p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Page</code> â Page A Page object
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to retrieve the current page :
  <div class="listing">
  <pre>    myPDF.getCurrentPage ();
  </pre>
  </div>
  <p></p>
</div>
<a name="getMargins()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">getMargins</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function getMargins():Rectangle</code><p>
  Lets you retrieve the margins dimensions
    </p><p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Rectangle</code> â Rectangle
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to get the margins dimensions :
  <div class="listing">
  <pre>    var marginsDimensions:Rectangle = myPDF.getMargins ();
  // output : (x=10.001249999999999, y=10.001249999999999, w=575.2774999999999, h=811.88875)
  trace( marginsDimensions )
  </pre>
  </div>
  <p></p>
</div>
<a name="getPage()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">getPage</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function getPage(pPage:int):Page</code><p>
  Lets you retrieve a Page object
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pPage</span>:int</code> â page number, from 1 to total numbers of pages
  </td>
</tr>
</tbody></table>
<p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Page</code> â Page
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to retrieve the first page :
  <div class="listing">
  <pre>    myPDF.getPage ( 1 );
  </pre>
  </div>
  <p></p>
</div>
<a name="getPageCount()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">getPageCount</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function getPageCount():int</code><p>
  Lets you retrieve the number of pages in the PDF document
    </p><p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>int</code> â int Number of pages in the PDF
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to retrieve the number of pages :
  <div class="listing">
  <pre>    var totalPages:int = myPDF.getPageCount ();
  </pre>
  </div>
  <p></p>
</div>
<a name="getX()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">getX</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function getX():Number</code><p>
  Lets you retrieve the X position for the current page
    </p><p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Number</code> â Number the X position
  </td>
</tr>
</tbody></table>
</div>
<a name="getY()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">getY</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function getY():Number</code><p>
  Lets you retrieve the Y position for the current page
    </p><p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Number</code> â Number the Y position
  </td>
</tr>
</tbody></table>
</div>
<a name="hasEventListener()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">hasEventListener</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function hasEventListener(type:String):Boolean</code><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">type</span>:String</code></td>
</tr>
</tbody></table>
<p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Boolean</code></td>
</tr>
</tbody></table>
</div>
<a name="lineStyle()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">lineStyle</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function lineStyle(pColor:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a>, pThickness:Number = 1, pAlpha:Number = 1.0, pBlend:String = "Normal", pStyle:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/drawing/DashedLine.html">DashedLine</a> = null, pCaps:String = null, pJoints:String = null, pMiterLimit:Number = 3, pMatrix:Matrix = null):void</code><p>
  Sets the stroke style
  </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pColor</span>:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a></code> â Color object, can be CMYKColor, GrayColor, or RGBColor
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pThickness</span>:Number</code> (default = <code>1</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pAlpha</span>:Number</code> (default = <code>1.0</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pBlend</span>:String</code> (default = "<code>Normal</code>")<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pStyle</span>:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/drawing/DashedLine.html">DashedLine</a></code> (default = <code>null</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pCaps</span>:String</code> (default = <code>null</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pJoints</span>:String</code> (default = <code>null</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pMiterLimit</span>:Number</code> (default = <code>3</code>)<code></code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pMatrix</span>:Matrix</code> (default = <code>null</code>)<code></code></td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to set a specific stroke style :
  <div class="listing">
  <pre>    myPDF.lineStyle ( new RGBColor ( 150, 250, 0 ), 1, 1, null, Caps.NONE, Joint.MITER);
  </pre>
  </div>
  <p></p>
</div>
<a name="lineTo()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">lineTo</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function lineTo(pX:Number, pY:Number):void</code><p>
  Lets you draw a stroke from the current point to the new point
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â X position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> â Y position
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to draw some dashed lines in the current page with specific caps style and joint style :
  <br><b>Important : Always call the end() method when you're done</b>
  <div class="listing">
  <pre>    myPDF.lineStyle( new RGBColor ( 255, 200, 0), 1, 1 );
  myPDF.moveTo ( 10, 20 );
  myPDF.lineTo ( 40, 20 );
  myPDF.lineTo ( 40, 40 );
  myPDF.lineTo ( 10, 40 );
  myPDF.lineTo ( 10, 20 );
  myPDF.end();
  </pre>
  </div>
  <p></p>
</div>
<a name="moveTo()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">moveTo</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function moveTo(pX:Number, pY:Number):void</code><p>
  Lets you move the current drawing point to the specified destination
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â X position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> â Y position
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to move the pen to 120,200 :
  <div class="listing">
  <pre>    myPDF.moveTo ( 120, 200 );
  </pre>
  </div>
  <p></p>
</div>
<a name="newLine()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">newLine</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function newLine(pHeight:*):void</code><p>
  Lets you insert a line break for text
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pHeight</span>:*</code> â Line break height
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add a line break :
  <div class="listing">
  <pre>    myPDF.newLine ( 10 );
  </pre>
  </div>
  <p></p>
</div>
<a name="removeAllPages()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">removeAllPages</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function removeAllPages():void</code><p>
  Lets you remove all the pages from the PDF
    </p><br>
<span class="label">Example</span>
<br>  This example shows how to remove all the pages :
  <div class="listing">
  <pre>  myPDF.removeAllPages();
  </pre>
  </div>
  <p></p>
</div>
<a name="removeEventListener()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">removeEventListener</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void</code><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">type</span>:String</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">listener</span>:Function</code></td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">useCapture</span>:Boolean</code> (default = <code>false</code>)<code></code></td>
</tr>
</tbody></table>
</div>
<a name="removePage()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">removePage</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function removePage(pPage:int):Page</code><p>
  Lets you remove a Page from the PDF
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pPage</span>:int</code> â page number, from 1 to total numbers of pages
  </td>
</tr>
</tbody></table>
<p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Page</code> â Page
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to remove the first page :
  <div class="listing">
  <pre>  myPDF.removePage(1);
  </pre>
  If you want to remove pages each by each, you can combine removePage with getPageCount
  <pre>  myPDF.removePage(myPDFEncoder.getPageCount());
  </pre>
  </div>
  <p></p>
</div>
<a name="rotatePage()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">rotatePage</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function rotatePage(pPage:int, pRotation:Number):void</code><p>
  Lets you rotate a specific page (between 1 and last one)
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pPage</span>:int</code> â Page number
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRotation</span>:Number</code> â Page rotation (must be a multiple of 90)
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Throws</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code></code> â  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to rotate the first page 90 cw
  <div class="listing">
  <pre>    myPDF.rotatePage ( 1, 90 );
  </pre>
  </div>
  <p></p>
</div>
<a name="savePDF()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">savePDF</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function savePDF(pMethod:String, pURL:String = "", pDownload:String = "inline", pName:String = "generated.pdf"):*</code><p>
  Lets you finalize and save the PDF document and make it available for download
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pMethod</span>:String</code>
 â Can be se to Method.LOCAL, the savePDF will return the PDF ByteArray.
 When Method.REMOTE is passed, just specify the path to the create.php 
file
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pURL</span>:String</code> (default = "<code></code>")<code></code> â The url of the create.php file
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pDownload</span>:String</code> (default = "<code>inline</code>")<code></code>
 â Lets you specify the way the PDF is going to be available. Use 
Download.INLINE if you want the PDF to be opened in the browser, use 
Download.ATTACHMENT if you want to make it available with a save-as 
dialog box
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pName</span>:String</code> (default = "<code>generated.pdf</code>")<code></code> â The name of the PDF, only available when Method.REMOTE is used
  </td>
</tr>
</tbody></table>
<p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>*</code> â The ByteArray PDF when Method.LOCAL is used, otherwise the method returns null
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to save the PDF with a download dialog-box :
  <div class="listing">
  <pre>    var myPDFStream:ByteArray = myPDF.getPDF();
  </pre>
  </div>
  <p></p>
</div>
<a name="setAlpha()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setAlpha</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setAlpha(pAlpha:Number, pBlendMode:String = "Normal"):void</code><p>
  Lets you move the current drawing point to the specified destination
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pAlpha</span>:Number</code> â Opacity
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pBlendMode</span>:String</code> (default = "<code>Normal</code>")<code></code> â Blend mode, can be Blend.DIFFERENCE, BLEND.HARDLIGHT, etc.
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to set the alpha for any following drawing, image or text operation.
  <div class="listing">
  <pre>    myPDF.setAlpha ( .5 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setAuthor()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setAuthor</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setAuthor(pAuthor:String):void</code><p>
  Sets the specified author for the PDF tags
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pAuthor</span>:String</code> â The author
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add a specific author to the tags :
  <div class="listing">
  <pre>    myPDF.setAuthor ( "Bob" );
  </pre>
  </div>
  <p></p>
</div>
<a name="setBottomMargin()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setBottomMargin</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setBottomMargin(pMargin:Number):void</code><p>
  Lets you specify the bottom margin
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pMargin</span>:Number</code> â Bottom margin
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how set bottom margin for the PDF document :
  <div class="listing">
  <pre>    myPDF.setBottomMargin ( 10 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setCreator()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setCreator</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setCreator(pCreator:String):void</code><p>
  Sets the specified creator for the PDF tags
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pCreator</span>:String</code> â Page number
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to rotate the first page 90 cw
  <div class="listing">
  <pre>    myPDF.rotatePage ( 1, 90 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setDisplayMode()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setDisplayMode</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setDisplayMode(pZoom:String = "FullWidth", pLayout:String = "SinglePage", pPageMode:String = "UseNone"):void</code><p>
  Lets you set a specific display mode, the DisplayMode takes care of the general layout of the PDF in Acrobat Reader
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pZoom</span>:String</code> (default = "<code>FullWidth</code>")<code></code> â Zoom mode, can be Display.FULL_PAGE, Display.FULL_WIDTH, Display.REAL, Display.DEFAULT
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLayout</span>:String</code> (default = "<code>SinglePage</code>")<code></code> â Layout of the PDF document, can be Layout.SINGLE_PAGE, Layout.ONE_COLUMN, Layout.TWO_COLUMN_LEFT, Layout.TWO_COLUMN_RIGHT
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pPageMode</span>:String</code> (default = "<code>UseNone</code>")<code></code> â PageMode can be pageMode.USE_NONE, PageMode.USE_OUTLINES, PageMode.USE_THUMBS, PageMode.FULL_SCREEN
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example creates a PDF which opens at full page scaling, one page at a time
  <div class="listing">
  <pre>    myPDF.setDisplayMode (Display.FULL_PAGE, Layout.SINGLE_PAGE);
  </pre>
  </div>
  <p></p>
</div>
<a name="setFont()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setFont</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setFont(pFamily:String, pStyle:String = "", pSize:int = 0):void</code><p>
  Lets you set a specific font
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pFamily</span>:String</code>
 â Font family, can be any of FontFamily.COURIER, FontFamily.HELVETICA, 
FontFamily.ARIAL, FontFamily.TIMES, FontFamily.SYMBOL, 
FontFamily.ZAPFDINGBATS.
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pStyle</span>:String</code> (default = "<code></code>")<code></code> â Any font style, can be Style.BOLD, Style.ITALIC, Style.BOLD_ITALIC, Style.NORMAL
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pSize</span>:int</code> (default = <code>0</code>)<code></code></td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to set the Helvetica font, with a bold style :
  <div class="listing">
  <pre>    myPDF.setFont( FontFamily.HELVETICA, Style.BOLD );
  </pre>
  </div>
  <p></p>
</div>
<a name="setFontSize()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setFontSize</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setFontSize(size:int):void</code><p>
  Lets you retrieve a Page object
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">size</span>:int</code> â Page Format, can be Size.A3, Size.A4, Size.A5, Size.LETTER or Size.LEGAL
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to retrieve the first page :
  <div class="listing">
  <pre>    myPDF.getPage ( 1 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setKeywords()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setKeywords</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setKeywords(pKeywords:String):void</code><p>
  Sets the specified keywords for the PDF tags
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pKeywords</span>:String</code> â The keywords
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add keywords to the tags :
  <div class="listing">
  <pre>    myPDF.setKeywords ( "Design, Agency, Communication, etc." );
  </pre>
  </div>
  <p></p>
</div>
<a name="setLeftMargin()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setLeftMargin</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setLeftMargin(pMargin:Number):void</code><p>
  Lets you specify the left margin
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pMargin</span>:Number</code> â Left margin
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how set left margin for the PDF document :
  <div class="listing">
  <pre>    myPDF.setLeftMargin ( 10 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setMargins()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setMargins</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setMargins(pLeft:Number, pTop:Number, pRight:Number = -1, pBottom:Number = 20):void</code><p>
  Lets you specify the left, top, and right margins
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pLeft</span>:Number</code> â Left margin
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pTop</span>:Number</code> â Right number
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRight</span>:Number</code> (default = <code>-1</code>)<code></code> â Top number
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pBottom</span>:Number</code> (default = <code>20</code>)<code></code></td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how set margins for the PDF document :
  <div class="listing">
  <pre>    myPDF.setMargins ( 10, 10, 10 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setPagination()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setPagination</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setPagination(pActive:Boolean):void</code><p>
  Lets you activate the auto pagination mode
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pActive</span>:Boolean</code> â Activate the mode
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to activate the auto pagination mode :
  <div class="listing">
  <pre>    myPDF.setPagination ( true );
  </pre>
  </div>
  <p></p>
</div>
<a name="setRightMargin()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setRightMargin</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setRightMargin(pMargin:Number):void</code><p>
  Lets you specify the right margin
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pMargin</span>:Number</code> â Right margin
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how set right margin for the PDF document :
  <div class="listing">
  <pre>    myPDF.setRightMargin ( 10 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setSubject()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setSubject</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setSubject(pSubject:String):void</code><p>
  Lets you set a subject for the PDF tags
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pSubject</span>:String</code> â The subject
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>   This example shows how to set a specific subject to the PDF document :
  <div class="listing">
  <pre>    myPDF.setSubject ( "Any topic" );
  </pre>
  </div>
  <p></p>
</div>
<a name="setTitle()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setTitle</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setTitle(pTitle:String):void</code><p>
  Lets you set a subject for the PDF tags
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pTitle</span>:String</code> â The title
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to set a specific title to the PDF document :
  <div class="listing">
  <pre>    myPDF.setTitle ( "AlivePDF !" );
  </pre>
  </div>
  <p></p>
</div>
<a name="setTopMargin()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setTopMargin</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setTopMargin(pMargin:Number):void</code><p>
  Lets you specify the top margin
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pMargin</span>:Number</code> â Top margin
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how set top margin for the PDF document :
  <div class="listing">
  <pre>    myPDF.setTopMargin ( 10 );
  </pre>
  </div>
  <p></p>
</div>
<a name="setViewerPreferences()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setViewerPreferences</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setViewerPreferences(pToolBar:String = "false", 
pMenuBar:String = "false", pWindowUI:String = "false", pFitWindow:String
 = "false", pCenteredWindow:String = "false", pDisplayTitle:String = 
"false"):void</code><p>
  Lets you control the way the document is to be presented on the screen or in print.
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pToolBar</span>:String</code> (default = "<code>false</code>")<code></code> â Toolbar behavior
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pMenuBar</span>:String</code> (default = "<code>false</code>")<code></code> â Menubar behavior
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pWindowUI</span>:String</code> (default = "<code>false</code>")<code></code> â WindowUI behavior
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pFitWindow</span>:String</code> (default = "<code>false</code>")<code></code> â Specify whether to resize the document's window to fit the size of the first displayed page.
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pCenteredWindow</span>:String</code> (default = "<code>false</code>")<code></code> â Specify whether to position the document's window in the center of the screen.
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pDisplayTitle</span>:String</code> (default = "<code>false</code>")<code></code> â Specify whether the window's title bar should display the document title taken from the value passed to the setTitle method
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to present the document centered on the screen with no toolbars :
  <div class="listing">
  <pre>    myPDF.setViewerPreferences (ToolBar.HIDE, MenuBar.HIDE, WindowUI.HIDE, FitWindow.DEFAULT, CenterWindow.CENTERED);
  </pre>
  </div>
  <p></p>
</div>
<a name="setX()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setX</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setX(pX:Number):void</code><p>
  Lets you specify the X position for the current page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â the X position
  </td>
</tr>
</tbody></table>
</div>
<a name="setXY()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setXY</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setXY(pX:Number, pY:Number):void</code><p>
  Lets you specify the X and Y position for the current page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pX</span>:Number</code> â The X position
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> â The Y position
  </td>
</tr>
</tbody></table>
</div>
<a name="setY()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">setY</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function setY(pY:Number):void</code><p>
  Lets you specify the Y position for the current page
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pY</span>:Number</code> â the Y position
  </td>
</tr>
</tbody></table>
</div>
<a name="textStyle()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">textStyle</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function textStyle(pColor:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a>,
 pAlpha:int = 1, pRendering:int = 0, pWordSpace:Number = 0, 
pCharSpace:Number = 0, pScale:Number = 100, pLeading:Number = 0):void</code><p>
  Sets the text style
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pColor</span>:<a href="http://www.bytearray.org/wp-content/projects/alivepdf/alivepdf-asdoc/org/alivepdf/colors/Color.html">Color</a></code> â Color object, can be CMYKColor, GrayColor, or RGBColor
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pAlpha</span>:int</code> (default = <code>1</code>)<code></code> â Text opacity
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pRendering</span>:int</code> (default = <code>0</code>)<code></code> â pRendering Specify the text rendering mode
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pWordSpace</span>:Number</code> (default = <code>0</code>)<code></code> â Spaces between each words
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pCharSpace</span>:Number</code> (default = <code>0</code>)<code></code> â Spaces between each characters
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pScale</span>:Number</code> (default = <code>100</code>)<code></code> â Text scaling
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLeading</span>:Number</code> (default = <code>0</code>)<code></code> â Text leading
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to set a specific black text style with full opacity :
  <div class="listing">
  <pre>    myPDF.textStyle ( new RGBColor ( 0, 0, 0 ), 1 ); 
  </pre>
  </div>
  <p></p>
</div>
<a name="willTrigger()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">willTrigger</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function willTrigger(type:String):Boolean</code><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">type</span>:String</code></td>
</tr>
</tbody></table>
<p></p>
<span class="label">Returns</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20"></td><td><code>Boolean</code></td>
</tr>
</tbody></table>
</div>
<a name="writeText()"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">writeText</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<code>public function writeText(pHeight:Number, pText:String, pLink:String = ""):void</code><p>
  Lets you write some text
    </p><span class="label">Parameters</span>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td width="20px"></td><td><code><span class="label">pHeight</span>:Number</code> â Line height, lets you specify height between each lines
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pText</span>:String</code> â Text to write, to put a line break just add a \n in the text string
  </td>
</tr>
<tr>
<td class="paramSpacer">&nbsp;</td>
</tr>
<tr>
<td width="20px"></td><td><code><span class="label">pLink</span>:String</code> (default = "<code></code>")<code></code> â Any link, like http://www.mylink.com, will open te browser when clicked
  </td>
</tr>
</tbody></table>
<br>
<span class="label">Example</span>
<br>  This example shows how to add some text to the current page :
  <div class="listing">
  <pre>    myPDF.writeText ( 5, "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.", "http://www.google.fr");
  </pre>
  </div>
  This example shows how to add some text with a clickable link :
  <div class="listing">
  <pre>    myPDF.writeText ( 5, "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.", "http://www.google.fr");
  </pre>
  </div>
  <p></p>
</div>
<div class="detailSectionHeader">Event detail</div>
<a name="event:complete"></a>
<table class="detailHeader" cellpadding="0" cellspacing="0">
<tbody><tr>
<td class="detailHeaderName">complete</td><td class="detailHeaderType">event&nbsp;</td>
</tr>
</tbody></table>
<div class="detailBody">
<span class="label">Event object type: </span><a href=""><code>flash.events.Event.COMPLETE</code></a>
<br>
<p></p><p>
  Dispatched when PDF is generated. The finish() method generate this event
    </p><br>
<span class="label">Example</span>
<br>  This example shows how to create a valid PDF document :
  <div class="listing">
  <pre>    myPDF.addEventListener ( Event.COMPLETE, generated );
  </pre>
  </div>
   <p></p>
</div>
<br>
<br>
<hr>
<br>
<p></p>
<center class="copyright">Thibault Imbert - AlivePDF 0.1.4 Documentation - http://www.alivepdf.org/</center>
</div>



</body></html>
<!--Thibault Imbert - AlivePDF 0.1.4 Documentation - http://www.alivepdf.org/-->